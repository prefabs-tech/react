{
  "buttons": {
    "back": "Back (fr)"
  },
  "common": {
    "usage": "To use the {{component}} component, simply import it into your React file (fr):"
  },
  "propertiesTable": {
    "header": {
      "default": "Default (fr)",
      "description": "Description (fr)",
      "properties": "Properties (fr)",
      "type": "Type (fr)"
    }
  },
  "headers": {
    "buttons": "Buttons (fr)",
    "data": "Data (fr)",
    "examples": "Examples (fr)",
    "file": "File (fr)",
    "formWidgets": "Form widgets (fr)",
    "import": "Import (fr)",
    "menu": "Menu (fr)",
    "messages": "Messages (fr)",
    "misc": "Misc",
    "overlay": "Overlay (fr)",
    "panel": "Panel",
    "properties": "Properties (fr)",
    "propertiesValue": "Properties: {{value}}",
    "usage": "Usage (fr)",
    "types": "Types (fr)"
  },
  "button": {
    "title": "Button (fr)",
    "subtitle": "The Button component is a flexible and customizable button implementation for React applications. It supports various properties for styling, behavior, and functionality, making it suitable for different use cases. (fr)",
    "usage": {
      "basic": "Basic (fr)",
      "variant": "Variant (fr)",
      "severity": "Severity (fr)",
      "size": "Size (fr)",
      "outlined": "Outlined (fr)",
      "icons": "Icons (fr)",
      "disabled": "Disabled (fr)",
      "text": "Text (fr)",
      "link": "Link (fr)",
      "tooltip": "Button with tooltip (fr)"
    },
    "propertiesDescription": {
      "children": "The content to be displayed inside the button. (fr)",
      "className": "Additional CSS classes to apply to the button. (fr)",
      "disabled": "If true, the button will be disabled and non-interactive. (fr)",
      "iconLeft": "Icon to be displayed on the left side of the button. Can be a string (class name) or a ReactNode. (fr)",
      "iconRight": "Icon to be displayed on the right side of the button. Can be a string (class name) or a ReactNode. (fr)",
      "label": "Text to be displayed in the button when `children` is not provided. (fr)",
      "loading": "If true, indicates that the button is in a loading state and disables user interaction. (fr)",
      "onClick": "Function to be called when the button is clicked. (fr)",
      "severity": "Defines the styling severity of the button. Defaults to 'primary'. (fr)",
      "size": "Sets the size of the button. Defaults to 'medium'. (fr)",
      "to": "If provided, the button will act as a `Link` to the specified path instead of a regular button. (fr)",
      "title": "Tooltip text that appears on hover. (fr)",
      "variant": "Specifies the button variant. Defaults to 'filled'. (fr)",
      "rounded": "Specifies the button border-radius to be rounded when set to `true`. Defaults to 'false'. (fr)"
    },
    "message": "Click to view profile (fr)"
  },
  "checkboxInput": {
    "title": "CheckboxInput (fr)",
    "subtitle": "The CheckboxInput component is a versatile and reusable component that supports both single and multiple checkbox selections. It allows for customization through a variety of props and handles validation, error messages, and helper texts. (fr)",
    "usage": {
      "basic": "Basic (fr)",
      "customLabel": "Custom label for single checkbox input (fr)",
      "multiple": "Multiple checkbox input (fr)",
      "customOptionsLabel": "Custom label for multiple checkbox input (fr)",
      "customOptionsLabelDescription": "The `renderOptionsLabel` function in a checkbox group allows custom rendering of options label. You can use it to display rich content like icons, descriptions, or formatted text. (fr)",
      "disabled": "Disabled (fr)"
    }
  },
  "card": {
    "title": "Card (fr)",
    "header": "Card header (fr)",
    "body": "Card body (fr)",
    "footer": "Card footer (fr)",
    "usage": {
      "basic": "Basic (fr)",
      "outlined": "Outlined card (fr)"
    }
  },
  "confirmationModal": {
    "title": "Confirmation modal (fr)",
    "buttonLabel": "Open confirmation modal (fr)",
    "header": "Confirmation required (fr)",
    "message": "Are you sure you want to proceed? (fr)"
  },
  "currencyPicker": {
    "label": "Currency (fr)",
    "multiSelectPlaceholder": "Select currencies (fr)",
    "placeholder": "Select a currency (fr)",
    "title": "CurrencyPicker (fr)",
    "usage": {
      "basic": "Basic (fr)",
      "extensiveOptions": "Currency picker with extensive options (fr)",
      "multiple": "Multiple currency select (fr)"
    }
  },
  "data": {
    "title": "Data (fr)",
    "subtitle": "The Data component is a reusable React component designed to display a labeled value. (fr)",
    "usage": {
      "basic": "Basic (fr)",
      "mode": "Stat mode (fr)",
      "displayObject": "Display value from object (fr)",
      "structuredData": "Rendering structured data (fr)",
      "example": "Example (fr)"
    }
  },
  "dropdownMenu": {
    "title": "Dropdown menu (fr)",
    "usage": {
      "hiddenDropdownIcon": "Hidden dropdown icon with default label (fr)",
      "leftAlign": "Popup align left (fr)",
      "templating": "Menu templating (fr)"
    },
    "label": {
      "setting": "Settings (fr)",
      "user": "User (fr)"
    }
  },
  "editableTitle": {
    "usage": {
      "basic": {
        "title": "Basic (fr)",
        "description": "Editable title can be used by passing a `title` property. Title level is optional, it is `h1` by default. `onblur` event on the title input field triggers `onUpdate` method. (fr)"
      },
      "controlled": {
        "title": "Controlled (fr)",
        "description": "Editable title can be used as a controllable element by passing `onChange` property. Note this will impact the performance of the component. (fr)"
      },
      "disabled": {
        "description": "The edit function can be disabled. To do this, pass the `allowEdit` option with value `false`. (fr)",
        "title": "Disabled edit (fr)"
      },
      "customToggler": {
        "description": "The toggle button can be customized by pass your own toggler using `toggler` prop. (fr)",
        "title": "Custom toggler (fr)"
      }
    },
    "subtitle": "Editable title is an extension to a page or section title which can be edited. (fr)",
    "title": "Editable title (fr)"
  },
  "filesTable": {
    "title": "Files table (fr)",
    "pagination": {
      "pageControl": "Go to page (fr)",
      "rowsPerPage": "Items per page (fr)"
    }
  },
  "gridContainer": {
    "title": "Grid container (fr)"
  },
  "inlineLink": {
    "title": "Inline link (fr)",
    "label": "Click here (fr)"
  },
  "loading": {
    "title": "Loading (fr)"
  },
  "responsiveMenu": {
    "title": "Responsive menu (fr)"
  },
  "submitButton": {
    "title": "Submit button (fr)",
    "usage": {
      "basic": "Basic (fr)",
      "loading": "Loading (fr)"
    }
  },
  "youtubeFacade": {
    "title": "Youtube facade (fr)"
  },
  "exportButton": {
    "propertiesDescription": {
      "filename": "The filename to use for the exported XLSX file. (fr)",
      "getData": "Function that returns the data to be exported in a 2D array format. (fr)",
      "label": "Text displayed on the export button. (fr)",
      "onExportEnd": "Callback function invoked when export ends. (fr)",
      "onExportStart": "Callback function invoked when export starts. (fr)",
      "sheetName": "The name of the worksheet within the XLSX file. (fr)",
      "sheetOptions": "Additional worksheet options. (fr)"
    },
    "title": "Export button (fr)"
  },
  "fileCard": {
    "title": "File card (fr)"
  },
  "filesList": {
    "title": "Files list (fr)"
  },
  "filesPresentation": {
    "title": "Files presentation (fr)"
  },
  "table": {
    "title": "Table (fr)",
    "cssCodeBlock": {
      "title": "CSS code example (fr)",
      "messages": {
        "addHorizontal": "Add following css to your stylesheet for horizontal borders (fr)",
        "addVertical": "Add following css to your stylesheet for vertical borders (fr)",
        "note": "Note: (fr)"
      }
    },
    "usage": {
      "basic": "Basic table (fr)",
      "builtInActionColumn": "Table demonstrating built in actions column use case (fr)",
      "cellDataFormatting": "Table demonstrating cell content formatting (fr)",
      "filterable": "Table with filterable column (fr)",
      "sortable": "Table with sortable column (fr)",
      "rowSelection": "Table with row selection (fr)",
      "persistentState": "Table with persistent state (fr)",
      "customCellDataFormatting": "Table with custom cell data formatter (fr)",
      "customPagination": "Table with custom pagination (fr)",
      "customToolbarActions": "Table with custom toolbar actions (fr)",
      "columnTooltip": "Table with tooltip column (fr)",
      "columnAlignment": "Table cell content alignments (fr)",
      "columnAction": "Table with column action (fr)",
      "withFooter": "Table with footer (fr)",
      "withoutPagination": "Table without pagination (fr)",
      "withTitle": "Table with title (fr)",
      "withCustomFilter": "Table with custom filter component and filterFn (fr)",
      "withEqualServerFilter": "Table with equal server filterFn (fr)",
      "customStaticFilter": "Table with custom  filter component and static filterFn (fr)",
      "divContent": "Table demonstrating center aligned content (fr)",
      "singleActionColumn": "Table with single action button (fr)",
      "singleActionColumnWithMenu": "Table with single action menu (fr)",
      "rowSpecificActions": "Table with actions menu items filtered based on row data logic (fr)",
      "tableBorderHorizontal": "Table with custom style for horizontal border (fr)",
      "tableBorderVertical": "Table with custom style for vertical border (fr)"
    },
    "placeholder": {
      "country": "Select country (fr)",
      "date": "Select date (fr)",
      "endDate": "End date (fr)",
      "max": "Max (fr)",
      "min": "Min (fr)",
      "startDate": "Start date (fr)",
      "search": "Search (fr)",
      "select": "Select city (fr)",
      "status": "Select status (fr)"
    }
  },
  "message": {
    "subtitle": "The Message component displays contextual messages with optional icons and a closable action. It supports custom slots, making it flexible for various use cases. (fr)",
    "propertiesDescription": {
      "enableClose": "Displays a close icon if true, allowing the message to be dismissed. (fr)",
      "icon": "Icon to display alongside the message. (fr)",
      "message": "The message text to display in the component. (fr)",
      "onClose": "Function to be called when the message is closed. (fr)",
      "severity": "Defines the styling severity of the message. Defaults to 'info'. (fr)",
      "showIcon": "Show default icon based on severity or custom icon if provided. (fr)"
    },
    "title": "Message (fr)",
    "usage": {
      "arrayMessage": "Array of message (fr)",
      "basic": "Basic (fr)",
      "customMessage": "Custom message (fr)",
      "enableClose": "Enable close (fr)",
      "hideIcon": "Hide default icon (fr)",
      "icons": {
        "customIcon": "Custom icon (fr)",
        "icon": "Icon (fr)"
      },
      "severity": "Severity (fr)"
    }
  },
  "modal": {
    "title": "Modal (fr)",
    "header": "Header (fr)",
    "propertiesDescription": {
      "className": "Additional CSS classes to apply to the modal. (fr)",
      "children": "The content of the modal. (fr)",
      "footer": "Footer section of the modal. (fr)",
      "header": "Header section of the modal. (fr)",
      "onHide": "Emitted when the modal is requested to close. (fr)",
      "size": "Defines the width of the modal. (fr)",
      "visible": "Controls the visibility of the modal. (fr)"
    },
    "showButton": "Open modal (fr)",
    "subtitle": "A modal dialog component for displaying content in an overlay with support for custom headers, footers, and dismissal logic. (fr)",
    "usage": {
      "basic": "Basic (fr)",
      "headerAndFooter": "Header and footer (fr)"
    }
  },
  "tooltip": {
    "title": "Tooltip (fr)",
    "position": {
      "right": "Right (fr)",
      "left": "Left (fr)",
      "top": "Top (fr)",
      "bottom": "Bottom (fr)",
      "mouseTrack": "Mouse track (fr)",
      "configured": "Configured (fr)"
    }
  },
  "checkbox": {
    "title": "Checkbox (fr)"
  },
  "input": {
    "title": "Input (fr)",
    "usage": {
      "basic": "Basic (fr)",
      "invalidInput": "Invalid input (fr)"
    }
  },
  "sortableList": {
    "title": "Sortable list (fr)"
  },
  "popup": {
    "title": "Popup (fr)"
  },
  "stepper": {
    "title": "Stepper (fr)"
  },
  "tabbedPanel": {
    "title": "Tabbed panel (fr)",
    "usage": {
      "basic": "Basic usage (fr)",
      "customActiveTab": "Custom active tab (fr)",
      "disableTabState": {
        "subTitle": "By default, tab state is persisted between page refresh and navigations. You can disable this feature by passing persistState={false} prop to the component (fr)",
        "title": "State persistence disabled (fr)"
      },
      "positionBottom": "Bottom tabs (fr)",
      "positionLeft": "Left tabs (fr)",
      "positionRight": "Right tabs (fr)"
    }
  },
  "tabview": {
    "title": "TabView (fr)",
    "usage": {
      "basic": "Basic (fr)",
      "closable": "Closable tabs (fr)",
      "control": "Controlled tab navigation (fr)",
      "disableTabState": {
        "subTitle": "By default, tab state is persisted between page refresh and navigations. You can disable this feature by passing persistState={false} prop to the component (fr)",
        "title": "State persistence disabled (fr)"
      },
      "hashRoute": "Hash routing enabled (fr)",
      "positionBottom": "Bottom tabs (fr)",
      "positionLeft": "Left tabs (fr)",
      "positionRight": "Right tabs (fr)"
    }
  },
  "textarea": {
    "errorMessage": "Invalid input (fr)",
    "label": "Textarea label (fr)",
    "placeHolder": "Textarea placeholder (fr)",
    "title": "Textarea (fr)"
  },
  "page": {
    "title": {
      "menu": "Page (fr)",
      "basic": "Page demo basic (fr)",
      "centerAligned": "Page with center aligned contents (fr)",
      "toolbar": "Page with toolbar (fr)",
      "stringSubtitle": "Page with subtitle string (fr)",
      "componentSubtitle": "Page with subtitle component (fr)",
      "breadcrumb": "Page with breadcrumb (fr)",
      "complete": "Page with every component (fr)"
    },
    "subTitle": {
      "title": "Page subtitle (fr)",
      "tag": "Subtitle tag (fr)"
    },
    "heading": {
      "tag": "Heading tag (fr)"
    },
    "breadcrumb": {
      "back": "Back (fr)"
    },
    "toolbar": {
      "edit": "Edit (fr)",
      "button": {
        "label": "Click (fr)"
      }
    },
    "content": "Page content. (fr)"
  },
  "tag": {
    "title": "Tag (fr)",
    "usage": {
      "basic": "Basic (fr)",
      "color": "Color (fr)",
      "custom": "Custom tag (fr)",
      "icon": "Icon (fr)",
      "pill": "Pill (fr)"
    }
  },
  "select": {
    "autoSortOptionsInfo": "By default, options are sorted alphabetically. To render options in original order as provided, you can use <code>autoSortOptions={false}</code> (fr)",
    "label": "Country (fr)",
    "multiSelectPlaceholder": "Select countries (fr)",
    "placeholder": "Select a country (fr)",
    "title": "Select (fr)",
    "usage": {
      "basic": "Basic",
      "disabled": "Disabled (fr)",
      "group": "With grouping (fr)",
      "groupMultiSelect": "Multiselect with grouping (fr)",
      "groupMultiSelectDisabled": "Multiselect with group select disabled (fr)",
      "invalid": "Invalid (fr)",
      "key": "With label and value keys (fr)",
      "multiple": "Multiple select (fr)",
      "renderOption": "Select with custom option (fr)",
      "renderValue": "Select with custom selected value (fr)",
      "withTooltip": "With tooltip (fr)"
    }
  },
  "switchInput": {
    "basic": "Basic (fr)",
    "controlled": "Controlled (fr)",
    "disabledInput": "Disabled input (fr)",
    "invalidInput": "Invalid input (fr)",
    "normalInput": "Check here (fr)",
    "title": "Switch input (fr)",
    "subtitle": "The SwitchInput component is a customizable checkbox switch for toggling states. It supports additional properties such as error handling and labeling. (fr)"
  },
  "typeahead": {
    "message": {
      "emptyMessage": "No results found (fr)"
    },
    "title": "Typeahead (fr)",
    "label": {
      "client": "Client side typeahead (fr)",
      "customSuggestion": "Custom suggestion typeahead (fr)",
      "disabled": "Disabled (fr)",
      "emptyMessage": "Empty message typeahead (fr)",
      "server": "Server side typeahead (fr)",
      "invalid": "Invalid (fr)"
    },
    "placeholder": "Search... (fr)"
  }
}
