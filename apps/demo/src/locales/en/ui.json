{
  "buttons": {
    "back": "Back"
  },
  "common": {
    "usage": "To use the {{component}} component, simply import it into your React file:"
  },
  "propertiesTable": {
    "header": {
      "default": "Default",
      "description": "Description",
      "properties": "Properties",
      "type": "Type"
    }
  },
  "headers": {
    "buttons": "Buttons",
    "data": "Data",
    "examples": "Examples",
    "file": "File",
    "formWidgets": "Form widgets",
    "import": "Import",
    "menu": "Menu",
    "messages": "Messages",
    "misc": "Misc",
    "overlay": "Overlay",
    "panel": "Panel",
    "properties": "Properties",
    "propertiesValue": "Properties: {{value}}",
    "usage": "Usage",
    "types": "Types"
  },
  "button": {
    "title": "Button",
    "subtitle": "The Button component is a flexible and customizable button implementation for React applications. It supports various properties for styling, behavior, and functionality, making it suitable for different use cases.",
    "usage": {
      "basic": "Basic",
      "variant": "Variant",
      "severity": "Severity",
      "size": "Size",
      "outlined": "Outlined",
      "icons": "Icons",
      "disabled": "Disabled",
      "text": "Text",
      "link": "Link",
      "tooltip": "Button with tooltip"
    },
    "propertiesDescription": {
      "children": "The content to be displayed inside the button.",
      "className": "Additional CSS classes to apply to the button.",
      "disabled": "If true, the button will be disabled and non-interactive.",
      "iconLeft": "Icon to be displayed on the left side of the button. Can be a string (class name) or a ReactNode.",
      "iconRight": "Icon to be displayed on the right side of the button. Can be a string (class name) or a ReactNode.",
      "label": "Text to be displayed in the button when `children` is not provided.",
      "loading": "If true, indicates that the button is in a loading state and disables user interaction.",
      "onClick": "Function to be called when the button is clicked.",
      "severity": "Defines the styling severity of the button. Defaults to 'primary'.",
      "size": "Sets the size of the button. Defaults to 'medium'.",
      "to": "If provided, the button will act as a `Link` to the specified path instead of a regular button.",
      "title": "Tooltip text that appears on hover.",
      "variant": "Specifies the button variant. Defaults to 'filled'.",
      "rounded": "Specifies the button border-radius to be rounded when set to `true`. Defaults to 'false'."
    },
    "message": "Click to view profile"
  },
  "checkboxInput": {
    "title": "CheckboxInput",
    "subtitle": "The CheckboxInput component is a versatile and reusable component that supports both single and multiple checkbox selections. It allows for customization through a variety of props and handles validation, error messages, and helper texts.",
    "usage": {
      "basic": "Basic",
      "customLabel": "Custom label for single checkbox input",
      "multiple": "Multiple checkbox input",
      "customOptionsLabel": "Custom label for multiple checkbox input",
      "customOptionsLabelDescription": "The `renderOptionsLabel` function in a checkbox group allows custom rendering of options label. You can use it to display rich content like icons, descriptions, or formatted text.",
      "disabled": "Disabled"
    }
  },
  "card": {
    "title": "Card",
    "header": "Card header",
    "body": "Card body",
    "footer": "Card footer",
    "usage": {
      "basic": "Basic",
      "outlined": "Outlined card"
    }
  },
  "confirmationModal": {
    "title": "Confirmation modal",
    "buttonLabel": "Open confirmation modal",
    "header": "Confirmation required",
    "message": "Are you sure you want to proceed?"
  },
  "currencyPicker": {
    "label": "Currency",
    "multiSelectPlaceholder": "Select currencies",
    "placeholder": "Select a currency",
    "title": "CurrencyPicker",
    "usage": {
      "basic": "Basic",
      "extensiveOptions": "Currency picker with extensive options",
      "multiple": "Multiple currency select"
    }
  },
  "data": {
    "title": "Data",
    "subtitle": "The Data component is a reusable React component designed to display a labeled value.",
    "propertiesDescription": {
      "caption": "The caption displayed alongside the value.",
      "className": "Additional CSS classes to apply to the outer container.",
      "mode": "Defines which styling to apply to the component.",
      "value": "The value to display."
    },
    "usage": {
      "basic": "Basic",
      "mode": "Stat mode",
      "displayObject": "Display value from object",
      "structuredData": "Rendering structured data",
      "example": "Example"
    }
  },
  "dropdownMenu": {
    "title": "Dropdown menu",
    "usage": {
      "hiddenDropdownIcon": "Hidden dropdown icon with default label",
      "leftAlign": "Popup align left",
      "templating": "Menu templating"
    },
    "label": {
      "setting": "Settings",
      "user": "User"
    }
  },
  "editableTitle": {
    "usage": {
      "basic": {
        "title": "Basic",
        "description": "Editable title can be used by passing a `title` property. Title level is optional, it is `h1` by default. `onblur` event on the title input field triggers `onUpdate` method."
      },
      "controlled": {
        "title": "Controlled",
        "description": "Editable title can be used as a controllable element by passing `onChange` property. Note this will impact the performance of the component."
      },
      "disabled": {
        "description": "The edit function can be disabled. To do this, pass the `allowEdit` option with value `false`.",
        "title": "Disabled edit"
      },
      "customToggler": {
        "description": "The toggle button can be customized by pass your own toggler using `toggler` prop.",
        "title": "Custom toggler"
      }
    },
    "subtitle": "Editable title is an extension to a page or section title which can be edited.",
    "title": "Editable title"
  },
  "filesTable": {
    "title": "Files table",
    "pagination": {
      "pageControl": "Go to page",
      "rowsPerPage": "Items per page"
    }
  },
  "gridContainer": {
    "title": "Grid container"
  },
  "inlineLink": {
    "title": "Inline link",
    "label": "Click here"
  },
  "loading": {
    "title": "Loading"
  },
  "responsiveMenu": {
    "title": "Responsive menu"
  },
  "submitButton": {
    "propertiesDescription": {
      "disabled": "If true, the button will be disabled and non-interactive.",
      "label": "Text to be displayed in the button.",
      "loading": "If true, indicates that the button is in a loading state and disables user interaction."
    },
    "title": "Submit button",
    "usage": {
      "basic": "Basic",
      "loading": "Loading"
    }
  },
  "youtubeFacade": {
    "title": "Youtube facade"
  },
  "exportButton": {
    "propertiesDescription": {
      "filename": "The filename to use for the exported XLSX file.",
      "getData": "Function that returns the data to be exported in a 2D array format.",
      "label": "Text displayed on the export button.",
      "onExportEnd": "Callback function invoked when export ends.",
      "onExportStart": "Callback function invoked when export starts.",
      "sheetName": "The name of the worksheet within the XLSX file.",
      "sheetOptions": "Additional worksheet options."
    },
    "title": "Export button"
  },
  "fileCard": {
    "title": "File card"
  },
  "filesList": {
    "title": "Files list"
  },
  "filesPresentation": {
    "title": "Files presentation"
  },
  "table": {
    "cssCodeBlock": {
      "title": "CSS code example",
      "messages": {
        "addHorizontal": "Add following css to your stylesheet for horizontal borders",
        "addVertical": "Add following css to your stylesheet for vertical borders",
        "note": "Note:"
      }
    },
    "placeholder": {
      "country": "Select country",
      "date": "Select date",
      "endDate": "End date",
      "max": "Max",
      "min": "Min",
      "startDate": "Start date",
      "search": "Search",
      "select": "Select city",
      "status": "Select status"
    },
    "propertiesDescription": {
      "className": "Additional CSS classes to apply to the table.",
      "columnActionBtnLabel": "Label for the column action button.",
      "customFormatters": "Custom functions to format data in specific columns.",
      "dataActionsMenu": "Configuration or function to render row-specific action menus.",
      "data": "The array of data records to be displayed in the table.",
      "emptyTableMessage": "Message to display when there are no records in the table.",
      "enableRowSelection": "Enables row selection functionality.",
      "globalFilter": "Global filter.",
      "id": "Unique identifier for the table instance.",
      "initialFilters": "Initial column filter state applied to the table.",
      "initialSorting": "Initial sorting state for the table.",
      "isLoading": "Displays a loading icon.",
      "inputDebounceTime": "Debounce time (in ms).",
      "paginated": "Enables pagination for the table.",
      "paginationOptions": "Additional props for the pagination component.",
      "persistState": "Persist table state.",
      "persistStateStorage": "Storage type to use when persisting table state.",
      "resetStateActionBtnLabel": "Label for the reset state button in the table toolbar.",
      "rowClassName": "Custom class name row.",
      "rowPerPage": "Number of rows displayed per page.",
      "rowPerPageOptions": "List of selectable options for rows per page.",
      "showResetStateAction": "Button to reset the table state.",
      "totalRecords": "Total number of records.",
      "visibleColumns": "Array of columns that should be visible.",
      "title": "Title of the table.",
      "showColumnsAction": "Display column action.",
      "fetchData": "Fetch table data.",
      "handleResetState": "Callback triggered when reset state.",
      "onRowSelectChange": "Callback triggered when selected rows change.",
      "renderCustomPagination": "Custom pagination.",
      "renderSortIcons": "Custom sort icon renderer for sortable columns.",
      "renderTableFooterContent": "Custom table footer.",
      "renderToolbarItems": "Custom toolbar items to display above the table."
    },
    "subtitle": "The Table component displays data in tabular format.",
    "usage": {
      "basic": "Basic table",
      "cellDataFormatting": "Basic table(fr)",
      "columnAction": "Table with column action",
      "columnTooltip": "Table with tooltip column",
      "customPaginationToolbarFooter": "Table with custom pagination, toolbar and footer",
      "customStaticFilter": "Table with custom  filter component and static filterFn",
      "rowSelection": "Table with row selection",
      "rowSpecificActions": "Table with actions menu items filtered based on row data logic",
      "singleActionColumn": "Table with single action button",
      "singleActionColumnWithMenu": "Table with single action menu",
      "withCustomFilter": "Table with custom filter component and filterFn",
      "withEqualServerFilter": "Table with equal server filterFn"
    },
    "title": "Table"
  },
  "message": {
    "subtitle": "The Message component displays contextual messages with optional icons and a closable action. It supports custom slots, making it flexible for various use cases.",
    "propertiesDescription": {
      "enableClose": "Displays a close icon if true, allowing the message to be dismissed.",
      "icon": "Icon to display alongside the message.",
      "message": "The message text to display in the component.",
      "onClose": "Function to be called when the message is closed.",
      "severity": "Defines the styling severity of the message. Defaults to 'info'.",
      "showIcon": "Show default icon based on severity or custom icon if provided."
    },
    "title": "Message",
    "usage": {
      "arrayMessage": "Array of message",
      "basic": "Basic",
      "customMessage": "Custom message",
      "enableClose": "Enable close",
      "hideIcon": "Hide default icon",
      "icons": {
        "customIcon": "Custom icon",
        "icon": "Icon"
      },
      "severity": "Severity"
    }
  },
  "modal": {
    "title": "Modal",
    "header": "Header",
    "propertiesDescription": {
      "className": "Additional CSS classes to apply to the modal.",
      "children": "The content of the modal.",
      "footer": "Footer section of the modal.",
      "header": "Header section of the modal.",
      "onHide": "Emitted when the modal is requested to close.",
      "size": "Defines the width of the modal.",
      "visible": "Controls the visibility of the modal."
    },
    "showButton": "Open modal",
    "subtitle": "A modal dialog component for displaying content in an overlay with support for custom headers, footers, and dismissal logic.",
    "usage": {
      "basic": "Basic",
      "headerAndFooter": "Header and footer"
    }
  },
  "tooltip": {
    "title": "Tooltip",
    "position": {
      "right": "Right",
      "left": "Left",
      "top": "Top",
      "bottom": "Bottom",
      "mouseTrack": "Mouse track",
      "configured": "Configured"
    }
  },
  "checkbox": {
    "title": "Checkbox"
  },
  "input": {
    "title": "Input",
    "usage": {
      "basic": "Basic",
      "invalidInput": "Invalid input"
    }
  },
  "sortableList": {
    "title": "Sortable list"
  },
  "popup": {
    "title": "Popup"
  },
  "stepper": {
    "title": "Stepper"
  },
  "tabbedPanel": {
    "title": "Tabbed panel",
    "usage": {
      "basic": "Basic usage",
      "customActiveTab": "Custom active tab",
      "disableTabState": {
        "subTitle": "By default, tab state is persisted between page refresh and navigations. You can disable this feature by passing persistState={false} prop to the component",
        "title": "State persistence disabled"
      },
      "positionBottom": "Bottom tabs",
      "positionLeft": "Left tabs",
      "positionRight": "Right tabs"
    }
  },
  "tabview": {
    "title": "TabView",
    "usage": {
      "basic": "Basic",
      "closable": "Closable tabs",
      "control": "Controlled tab navigation",
      "disableTabState": {
        "subTitle": "By default, tab state is persisted between page refresh and navigations. You can disable this feature by passing persistState={false} prop to the component",
        "title": "State persistence disabled"
      },
      "hashRoute": "Hash routing enabled",
      "positionBottom": "Bottom tabs",
      "positionLeft": "Left tabs",
      "positionRight": "Right tabs"
    }
  },
  "textarea": {
    "errorMessage": "Invalid input",
    "label": "Textarea label",
    "placeHolder": "Textarea placeholder",
    "title": "Textarea"
  },
  "page": {
    "title": {
      "menu": "Page",
      "basic": "Page demo basic",
      "centerAligned": "Page with center aligned contents",
      "toolbar": "Page with toolbar",
      "stringSubtitle": "Page with subtitle string",
      "componentSubtitle": "Page with subtitle component",
      "breadcrumb": "Page with breadcrumb",
      "complete": "Page with every component"
    },
    "subTitle": {
      "title": "Page subtitle",
      "tag": "Subtitle tag"
    },
    "heading": {
      "tag": "Heading tag"
    },
    "breadcrumb": {
      "back": "Back"
    },
    "toolbar": {
      "edit": "Edit",
      "button": {
        "label": "Click"
      }
    },
    "content": "Page content."
  },
  "tag": {
    "title": "Tag",
    "usage": {
      "basic": "Basic",
      "color": "Color",
      "custom": "Custom tag",
      "icon": "Icon",
      "pill": "Pill"
    }
  },
  "select": {
    "autoSortOptionsInfo": "By default, options are sorted alphabetically. To render options in original order as provided, you can use <code>autoSortOptions={false}</code>",
    "label": "Country",
    "multiSelectPlaceholder": "Select countries",
    "placeholder": "Select a country",
    "title": "Select",
    "usage": {
      "basic": "Basic",
      "disabled": "Disabled",
      "group": "With grouping",
      "groupMultiSelect": "Multiselect with grouping",
      "groupMultiSelectDisabled": "Multiselect with group select disabled",
      "invalid": "Invalid",
      "key": "With label and value keys",
      "multiple": "Multiple select",
      "renderOption": "Select with custom option",
      "renderValue": "Select with custom selected value",
      "withTooltip": "With tooltip"
    }
  },
  "switchInput": {
    "basic": "Basic",
    "controlled": "Controlled",
    "disabledInput": "Disabled input",
    "invalidInput": "Invalid input",
    "normalInput": "Check here",
    "title": "Switch input",
    "subtitle": "The SwitchInput component is a customizable checkbox switch for toggling states. It supports additional properties such as error handling and labeling."
  },
  "typeahead": {
    "message": {
      "emptyMessage": "No results found"
    },
    "title": "Typeahead",
    "label": {
      "client": "Client side typeahead",
      "customSuggestion": "Custom suggestion typeahead",
      "disabled": "Disabled",
      "emptyMessage": "Empty message typeahead",
      "server": "Server side typeahead",
      "invalid": "Invalid"
    },
    "placeholder": "Search..."
  }
}
